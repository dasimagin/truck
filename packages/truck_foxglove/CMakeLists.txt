cmake_minimum_required(VERSION 3.8)
project(truck_foxglove)

<<<<<<< HEAD
=======
# if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#   add_compile_options(-Wall -Wextra -Wpedantic)
# endif()

>>>>>>> Added node for the Foxglove visualization of nav_msgs/Odometry messages
# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rmw REQUIRED)
find_package(std_msgs REQUIRED)
<<<<<<< HEAD
find_package(nav_msgs REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(tf2 REQUIRED)

add_executable(odom_translator src/main.cpp src/odom_translator.cpp)
ament_target_dependencies(odom_translator tf2 tf2_geometry_msgs rclcpp rmw std_msgs nav_msgs visualization_msgs)
=======
find_package(geometry_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(rclcpp_components REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

# add_library(odom_translator_node SHARED
#    src/odom_translator.cpp)
#rclcpp_components_register_nodes(odom_translator_node "truck::OdometryTranslator")

add_executable(odom_translator src/main.cpp src/odom_translator.cpp)
ament_target_dependencies(odom_translator rclcpp rmw std_msgs geometry_msgs nav_msgs)
>>>>>>> Added node for the Foxglove visualization of nav_msgs/Odometry messages

target_include_directories(odom_translator PUBLIC
  "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
  "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>"
  "$<INSTALL_INTERFACE:include/${PROJECT_NAME}>")

<<<<<<< HEAD
install(TARGETS odom_translator
  DESTINATION lib/${PROJECT_NAME})

=======

# target_include_directories(odom_translator PUBLIC
#   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
#   $<INSTALL_INTERFACE:include>
#   ${OpenCV_INCLUDE_DIRS}
#   ${PROJECT_SOURCE_DIR})
# target_compile_features(odom_translator PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17

install(TARGETS odom_translator
  DESTINATION lib/${PROJECT_NAME})

# if(BUILD_TESTING)
#   find_package(ament_lint_auto REQUIRED)
#   # the following line skips the linter which checks for copyrights
#   # uncomment the line when a copyright and license is not present in all source files
#   #set(ament_cmake_copyright_FOUND TRUE)
#   # the following line skips cpplint (only works in a git repo)
#   # uncomment the line when this package is not in a git repo
#   #set(ament_cmake_cpplint_FOUND TRUE)
#   ament_lint_auto_find_test_dependencies()
# endif()

>>>>>>> Added node for the Foxglove visualization of nav_msgs/Odometry messages
ament_package()
